plugins {
    id 'application'
}

mainClassName = "com.protocol180.aggregator.host.ProtocolHost"

// Override the default (simulation) with -PenclaveMode=
def mode = findProperty("enclaveMode")?.toString()?.toLowerCase() ?: "simulation"

// Create a task that can be used for generating signing materials
tasks.register("prepareForSigning") {
    it.dependsOn(":enclave:generateEnclaveSigningMaterial${mode.capitalize()}")
}

dependencies {
    implementation "com.r3.conclave:conclave-host:$conclaveVersion"

    // We need the enclave at runtime but not when compiling the host, because they don't share types.
    runtimeOnly project(path: ":enclave", configuration: mode)
    runtimeOnly "org.slf4j:slf4j-simple:1.7.30"

    testImplementation "org.junit.jupiter:junit-jupiter:5.6.0"
}

def graalVMDir = tasks.getByPath(":enclave:untarGraalVM").outputs.files.first()
def configurationDir = project(":enclave").projectDir.toPath().resolve("src/main/resources/META-INF/native-image")
def filterFile = configurationDir.resolve("filter.json")
application {
    run.dependsOn(":enclave:untarGraalVM")
    if (project.hasProperty("generateConfigFiles") && properties.get("enclaveMode").toString().toLowerCase() == "mock" != null) {
        applicationDefaultJvmArgs = [
                "-agentpath:$graalVMDir/jre/lib/amd64/libnative-image-agent.so=config-output-dir=$configurationDir," +
                        "caller-filter-file=$filterFile"
        ]
    }



}

test {
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}
