import net.corda.plugins.Cordform

import java.nio.file.Files
import java.nio.file.Paths

import static org.gradle.api.JavaVersion.VERSION_1_8

// This is based on the standard CorDapp Gradle template.
buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        dokka_version = constants.getProperty("dokkaVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}")
    }
}

plugins {
    // This makes test output more useful and in particular avoids the need to copy files out of the execution container
    // when testing with sim enclaves on macOS, if tests fail.
    id 'com.adarshr.test-logger' version '2.1.1' apply false
    id 'maven-publish'
    id 'signing'
}

def moduleProjects = allprojects.findAll { gradle.ext.moduleProjects.contains(it.name) }

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'idea'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    // Make sure the javadoc artifacts for Conclave are downloaded by IDEs.
    idea {
        module {
            downloadJavadoc = true
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    tasks.withType(AbstractCompile) {
        // This is a bit ugly, but Gradle isn't recognising the KotlinCompile task
        // as it does the built-in JavaCompile task.
        if (it.class.name.startsWith('org.jetbrains.kotlin.gradle.tasks.KotlinCompile')) {
            kotlinOptions {
                jvmTarget = VERSION_1_8
                apiVersion = '1.2'
                languageVersion = '1.2'
                javaParameters = true   // Useful for reflection.
            }
        }
    }

    repositories {
        // Add the Conclave repository to every project.
        maven {
            def path = Paths.get(rootDir.absolutePath).resolve(conclaveRepo).toAbsolutePath().normalize()
            if (!Files.isDirectory(path.resolve("com"))) {
                if (Files.isDirectory(Paths.get("/repo/com"))) {
                    path = Paths.get("/repo")
                } else {
                    throw new Exception("Neither $path nor /repo seem to exist, or they aren't Maven repositories; it should be the SDK 'repo' subdirectory. " +
                            "If on macOS, try using the container-gradle script to execute run the tests. See the Conclave CorDapp tutorial on https://docs.conclave.net/writing-cordapps.html")
                }
            }
            url = path.toFile()
        }

        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://jitpack.io' }

        // Protocol Aggregator snapshots are published here
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        archivesBaseName = "protocol-aggregator-${project.name}"
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

// applying common configuration to modules that produce artifacts
// which we publish to Maven Central
configure(moduleProjects){
    group = 'com.protocol180'

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from "${rootProject.projectDir}/etc/no-javadocs.txt"
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = "protocol-aggregator-${project.name}"

                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'Protocol Aggregator API'
                    description = 'This Cordapp is the complete implementation of data aggregation protocol with conclave(enclave) environment.'
                    url = "https://github.com/180protocol/180protocol"
                    licenses {
                        license {
                            name = "GNU Affero General Public License v3.0 or later"
                            url = "https://spdx.org/licenses/AGPL-3.0-or-later"
                        }
                    }
                    developers {
                        developer {
                            id = "180Protocol"
                            name = "Bond180 Limited"
                            email = "devops@180protocol.com"
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/180protocol/180protocol.git"
                        developerConnection = "scm:git:ssh://github.com:180protocol/180protocol.git"
                        url = "https://github.com/180protocol/180protocol"
                    }
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username project.sonatypeOssUsername
                    password project.sonatypeOssPassword
                }

                name = "central"

                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }

    signing {
        required { !version.endsWith('SNAPSHOT') }
        sign publishing.publications.maven
    }
}

dependencies {
    // Corda dependencies built in to the node.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // Depend on the main module.
    cordapp project(":workflows")
    cordapp project(':contracts')

    // Logging components built in to the node.
    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

// Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: Cordform, dependsOn: ['jar']) {
    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pAddress "notary-node:10002"
        rpcSettings {
            address("0.0.0.0:10003")
            adminAddress("0.0.0.0:10043")
        }
        cordapps.clear()
    }
    node {
        name "O=Host,L=London,C=GB"
        p2pAddress "host-node:10004"
        rpcSettings {
            address("0.0.0.0:10005")
            adminAddress("0.0.0.0:10045")
        }
        cordapp (project(':workflows')) {
            config '''\
                participantRole = COALITION_HOST
            '''.stripIndent()
        }
        runSchemaMigration = true
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=ProviderB,L=New York,C=US"
        p2pAddress "providerb-node:10006"
        rpcSettings {
            address("0.0.0.0:10007")
            adminAddress("0.0.0.0:10047")
        }
        cordapp (project(':workflows')) {
            config '''\
                participantRole = DATA_PROVIDER
            '''.stripIndent()
        }
        runSchemaMigration = true
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=ConsumerC,L=Chicago,C=US"
        p2pAddress "consumerc-node:10008"
        rpcSettings {
            address("0.0.0.0:10009")
            adminAddress("0.0.0.0:10049")
        }
        cordapp (project(':workflows')) {
            config '''\
                participantRole = DATA_CONSUMER
            '''.stripIndent()
        }
        runSchemaMigration = true
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
