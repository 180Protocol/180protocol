apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    workflow {
        name "CorDapp with enclave flows"
        vendor "R3"
        licence "Apache License, Version 2.0"
        versionId 1
    }
    signing {
        enabled false
    }
}

// Override the default (simulation) with -PenclaveMode=
def mode = findProperty("enclaveMode")?.toString()?.toLowerCase() ?: "mock"

// Create a task that can be used for generating signing materials
tasks.register("prepareForSigning") {
    it.dependsOn(":enclave:generateEnclaveSigningMaterial" + mode.capitalize())
}

dependencies {
    compile project(":aggregator-commons")
    compile project(path: ":enclave", configuration: mode)

    compile "com.r3.conclave:conclave-host:$conclaveVersion"
    compile "com.r3.conclave:conclave-client:$conclaveVersion"
    compile "com.r3.conclave:conclave-common:$conclaveVersion"

    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')

    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
}

test {
    useJUnitPlatform {
        includeEngines = ['junit-jupiter', 'junit-vintage']
        systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
        systemProperty 'enclaveMode', mode
    }
}

testlogger {
    showFullStackTraces true
}
